@startuml

Muestra "1" ..> "3" EstadoMuestra: estado 
Muestra "1" --> "1" Usuario: autor
Muestra "1" --> "1" Ubicacion: ubicación de la muestra
Muestra "1" --> "n" Opinion: opiniones de la muestra

Organizacion "1" --> "1" Ubicacion: ubicación
ZonaDeCobertura"1" --> "1" Ubicacion: ubicación
ZonaDeCobertura "n" <-- "n" ZonaDeCobertura: zonas contenidas

EstadoMuestra <|-- EstadoVerificada
EstadoMuestra <|-- EstadoNormal
EstadoMuestra <|-- EstadoConOpinionExperta

Usuario <|-- Especialista

ManagerDeEventos "1" --> "n" Organizacion: organizaciones 
ManagerDeEventos "1" --> "n" Muestra: muestras
ManagerDeEventos "1" --> "n" ZonaDeCobertura: zonas de cobertura 
Organizacion --> FuncionalidadExterna

BuscadorDeMuestras "1" --> "n" CriterioDeFiltracion: filtros de búsqueda

FiltroPorFechaDeCreacionDeLaMuestra <.. CriterioDeFiltracion
FiltroPorFechaDeCreacionDeLaMuestra <.. CriterioDeFiltracion
FiltroPorFechaDeUltimaVotacionDeLaMuestra <.. CriterioDeFiltracion
FiltroPorTipoDeInsectoDeLaMuestra <.. CriterioDeFiltracion
FiltroPorNivelDeVerificacionDeLaMuestra <.. CriterioDeFiltracion
FiltroAnd <.. CriterioDeFiltracion
FiltroOr <.. CriterioDeFiltracion


Class ManagerDeEventos{
	- static final ManagerDeEventos:;
	- muestrasReportadas: List<Muestra>; 
	- LzonasDeCobertura: List<ZonaDeCobertura>; 
	- suscriptores: Map <Organizacion, ZonaDeCobertura>;
	
	- ManagerDeEventos();
	+ static getInstancia(): ManagerDeEventos;
	
	+ getMuestrasReportadas(): List<Muestra>;
	+ agregarMuestra(Muestra nuevaMuestraReportada): void;
	+ getZonasDeCobertura(): List<ZonaDeCobertura>;
	+ agregarZonaDeCoberturaNueva(ZonaDeCobertura nuevaZonaDeCobertura): void;
	+ getSuscriptores():Map<Organizacion, ZonaDeCobertura>;
	+ suscribir(Organizacion organizacion, ZonaDeCobertura zona): void;
    + desuscribir(Organizacion organizacion, ZonaDeCobertura zona): void;
	+ notificarNuevaValidacionDeMuestra(Muestra muestra): void;
	+ notificarNuevaMuestra(Muestra muestra): void;
}

Class Organizacion {
	- ubicacionDeLaOrganizacion: Ubicacion; 
	- tipoDeOrganizacion: String;
	- cantidadDePersonal: Integer;
	- managerDeEventos: ManagerDeEventos;
	

	+ Organizacion(Ubicacion ubicacionDeLaOrganizacion, String tipoDeOrganizacion, Integer cantidadDePersonal);
	+ getUbicacionDeLaOrganizacion(): Ubicacion;
	+ setUbicacionDeLaOrganizacion(Ubicacion ubicacionDeLaOrganizacion): void;
	+ setTipoDeOrganizacion(String tipoDeOrganizacion): void;
	+ getCantidadDePersonal(): Integer;
	+ setCantidadDePersonal(Integer cantidadDePersonal): void;
	+ suscribirseA(ZonaDeCobertura zona): void;
	+ desuscribirseA(ZonaDeCobertura zona): void;
	+ funcionalidadNuevaMuestra(ZonaDeCobertura zona, Muestra muestra): FuncionalidadExterna;
	+ funcionalidadValidacionDeMuestra(ZonaDeCobertura zona, Muestra muestra): FuncionalidadExterna;
}

Class Ubicacion {
	- longitud: double;
	- latitud: double;
	
	+ Ubicacion(double latitud, double longitud);
	+ getLatitud(): double;
	+ getLongitud(): double;
	+ distanciaEntreDosUbicaciones(Ubicacion primerUbicacion, Ubicacion segundaUbicacion): double;

}

Class ZonaDeCobertura {
	- epicentro: Ubicacion;
	- radio: Integer; 
	- String nombre: Integer;
	- muestrasDeLaZona: ArrayList<Muestra>;
	- managerDeEventos: ManagerDeEventos;
	
	+ ZonaDeCobertura(Ubicacion epicentro, Integer radio, String nombre)
	+ getEpicentro(): Ubicacion;	
	+ getRadio(): Integer;
	+ getNombre():String 
	+ agregarMuestrasALaZona(): void 
	+ getMuestrasDeLaZona():ArrayList<Muestra> 
    + contieneMuestra(Muestra muestra): boolean
	+ seSolapaCon(ZonaDeCobertura otraZona): boolean
    + zonasSolapadas(List<ZonaDeCobertura> listaDeZonas): List<ZonaDeCobertura> 
    + contieneUbicacion(Ubicacion ubicacion): boolean
}    

Class BuscadorDeMuestras{
	- CriterioDeFiltracion estrategia:;

	+ BuscadorDeMuestras();
  	+ setEstrategia(CriterioDeFiltracion estrategia): void 
    + estrategia(): CriterioDeFiltracion 
	+ setMuestras(List<Muestra> muestras): void 
	+ filtrar():List<Muestra> 
}

Class FiltroPorFechaDeCreacionDeLaMuestra{
  	+ fecha: LocalDate;
  	
  	+ FiltroPorFechaDeCreacionDeLaMuestra():;
  	+ setFecha(LocalDate fecha): void 
  	+ cumpleCriterio(Muestra muestra): boolean;
}

Class FiltroPorFechaDeUltimaVotacionDeLaMuestra{
	+ fecha: LocalDate;
	
	+ FiltroPorFechaDeUltimaVotacionDeLaMuestra();
	+ setFecha(LocalDate fecha): void; 
	+ cumpleCriterio(Muestra muestra): boolean;
}

Class FiltroPorTipoDeInsectoDeLaMuestra{
  	+ tipoDeInsecto = String;
  	
  	+ FiltroPorTipoDeInsectoDeLaMuestra();
  	+ setTipoDeInsecto(String tipoDeInsecto): void ;
  	+ cumpleCriterio(Muestra muestra): boolean;
}

Class FiltroPorNivelDeVerificacionDeLaMuestra{
	- nivelDeVerificacion: String;
	
	+ FiltroPorNivelDeVerificacionDeLaMuestra(String nivelDeVerificacion);
	+ setNivelDeVerificacion(String nivelDeVerificacion): void ;
	+ cumpleCriterio(Muestra muestra): boolean;
}

Class FiltroAnd{
  	- List<CriterioDeFiltracion> estrategias;
  
  	+ FiltroAnd(List<CriterioDeFiltracion> estrategias);
  	+ agregarCriterio(CriterioDeFiltracion estrategia): void ; 
  	+ cumpleCriterio(Muestra muestra): boolean;
}

Class FiltroOr{
  	- List<CriterioDeFiltracion> estrategias;
  
  	+ FiltroOr(); 
  	+ agregarCriterio(CriterioDeFiltracion estrategia): void ;
  	+ cumpleCriterio(Muestra muestra): boolean;
}

Class EstadoMuestra{
  	- muestra: Muestra;
	
	+ EstadoMuestra(Muestra muestra)
	+ Muestra getMuestra():
	- setMuestra(Muestra muestra): void 
	+ cambiarEstado(): void 
	+ corroborarEstado(): void 
	+ abstract resultadoFinal(): String;
  	+ abstract siguienteEstado(): EstadoMuestra;
  	+ abstract condicionDeCambioDeEstado(): boolean;
  	+ abstract getEstado(): String;
  	+ abstract agregarO(Opinion opinionAAgregar): void;
	
}

Class EstadoNormal{
 	+ EstadoNormal(Muestra muestra)
		
	+ resultadoFinal(): String;
  	+ siguienteEstado(): EstadoMuestra;
  	+ condicionDeCambioDeEstado(): boolean;
  	+ getEstado(): String;
  	+ agregarO(Opinion opinionAAgregar): void;
}

Class EstadoConOpinionExperta{
	+ EstadoConOpinionExperta(Muestra muestra);
  	
  	+ resultadoFinal(): String;
  	+ siguienteEstado(): EstadoMuestra;
  	+ condicionDeCambioDeEstado(): boolean;
 	+ getEstado(): String;
  	+ agregarO(Opinion opinionAAgregar): void;
}

Class EstadoVerificada{
	+ EstadoVerificada(Muestra muestra)
 
 	+ resultadoFinal(): String;
  	+ siguienteEstado(): EstadoMuestra;
  	+ condicionDeCambioDeEstado(): boolean;
  	+ getEstado(): String;
  	+ agregarO(Opinion opinionAAgregar): void;
}
    
Class Muestra{
	- usuarioDueñoDeLaMuestra: Usuario; 
	- fotoDeLaMuestra: File; 
	- ubicacionDeLaMuestra: Ubicacion;
	- fechaDeCreacion: LocalDate; 
	- estadoDeLaMuestra: EstadoMuestra;
	- opinionesDeLaMuestra: List<Opinion>;
	- managerDeEventos: ManagerDeEventos;

	+ Muestra(Usuario usuarioDueñoDeLaMuestra, File fotoDeLaMuestra, Ubicacion ubicacionDeLaMuestra);
	+ agregarOpinion(Opinion opinionAAgregar): void;	
	+ agregarO(Opinion opinionAAgregar): void;
	+ getOpinionesDeLaMuestra(): List<Opinion>;	
	+ getFotoDeLaMuestra(): File;
	+ getUbicacionDeLaMuestra(): Ubicacion;
	+ getFechaDeCreacion():LocalDate;
	+ getEstadoDeLaMuestra():EstadoMuestra;	
	+ setEstadoDeLaMuestra(EstadoMuestra estadoDeLaMuestra): void;	
	+ getListaDeResultadosDeOpinionDeLaMuestra(): List<String> ;
	+ getListaOpinionesExpertasDeLaMuestra(): List<Opinion>;
	+ getListaDeResultadosExpertosDeLaMuestra(): List<String>;
	+ resultadoFinal(): String;
}


Class Usuario{
	- fechasDeEnvios: List<LocalDate> ;
	- List<LocalDate> fechasDeRevisiones: List<LocalDate>;
	- muestrasOpinadas: ArrayList<Muestra>;
	- muestrasEnviadas: ArrayList<Muestra>;
	
	+ nivelDeUsuario(): String;	
	+ getMuestrasEnviadas(): ArrayList<Muestra>; 
	+ registrarEnvio(): void;
	+ opinarSobreUnaMuestra(Muestra muestra, String opinion): void;
	+ registrarRevision(): void;
	+ cumpleCondicionDeExperto(): boolean; 
}

Class Especialista {
	+ boolean cumpleCondicionDeExperto(): boolean; 
}

Class Opinion {
	+ usuario: Usuario;
	+ muestra: Muestra;
	+ opinion: String;
	+ fecha: LocalDate;
	final tipo: String;
	
	+ Opinion(Usuario usuario, Muestra muestra, String opinion)
	+ getUsuario(): Usuario;
	+ getMuestra(): Muestra;
	+ getOpinion(): String;
	+  getFecha(): LocalDate;
	+ getTipo(): String; 

}


Interface FuncionalidadExterna{
  	+ nuevoEvento(Organizacion organizacion, ZonaDeCobertura zonaDeCobertura, Muestra muestra);
}

Interface CriterioDeFiltracion{
  	+ cumpleCriterio(Muestra muestra): boolean;
}

class CalculadoraDeDistancias {
	+ calcularDistancia(double lat1, double lon1, double lat2, double lon2): double; 
}

class BuscadorDeElementosDeUnaLista <T> {
	+ BuscadorDeElementosDeUnaLista();
	+ T encontrarElementoMasComun(List<T> lista): T;
	+ hayUnUnicoElementoConFrecuenciaMaxima(List<T> lista): boolean;
}

@enduml